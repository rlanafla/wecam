"use client"

import { useState, forwardRef,useEffect } from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import useTaskStore from '@/store/task-store'


import { fetchAllMembers } from '@/api-service/member-manage'; // Î©§Î≤Ñ Î™©Î°ù Ï°∞Ìöå Ìï®Ïàò


import { useAuthStore } from '@/store/authStore';

export default function Form({ mode = "add" }){
    const { accessToken, councilList } = useAuthStore();
    const taskStore = useTaskStore();
    const { newTask: globalTask} = taskStore;
    const { setNewTask: setGlobalTask } = useTaskStore(); // ‚úÖ Ï∂îÍ∞Ä
    const { setNewTaskAll } = useTaskStore(); 
    
    // Ïã§Ï†ú Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÌïôÏÉùÌöå Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const currentCouncil = councilList?.[0];
    const councilName = currentCouncil?.name || '';
    const councilId = currentCouncil?.id || null;
    const [newTask, setNewTask] = useState({
        title: '',
        deadline: null,
        file: null,
        description: '',
        assigneeList: [], // ‚Üê Ïù¥Î¶ÑÍ≥º ID Ï†ÄÏû•
      });


      const handleRemoveAssignee = (userId) => {
        console.log('üîç Îã¥ÎãπÏûê Ï†úÍ±∞ ÏãúÎèÑ:', userId);
        
        setNewTask((prev) => {
          const newAssigneeList = prev.assigneeList.filter((a) => a.userId !== userId);
          console.log('üîç ÏÉàÎ°úÏö¥ Îã¥ÎãπÏûê Î™©Î°ù:', newAssigneeList);
          return {
            ...prev,
            assigneeList: newAssigneeList,
          };
        });
        
        // Îã¥ÎãπÏûêÍ∞Ä Ï†úÍ±∞ÎêòÎ©¥ ÌòÑÏû¨ ÏøºÎ¶¨Î°ú Ï†úÏïà Î™©Î°ùÏùÑ Îã§Ïãú Í≥ÑÏÇ∞
        if (query.startsWith('@')) {
          const keyword = query.slice(1).toLowerCase();
          if (keyword.length > 0) {
            // Ï†úÏïà Î™©Î°ùÏùÑ Îã§Ïãú Í≥ÑÏÇ∞ÌïòÎäî Î°úÏßÅÏùÑ Ïó¨Í∏∞ÏÑú Ïã§Ìñâ
            setTimeout(() => {
              // useEffectÍ∞Ä ÏûêÎèôÏúºÎ°ú Ïã§ÌñâÎêòÏñ¥ Ï†úÏïà Î™©Î°ùÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï®
            }, 100);
          }
        }
      };


      const handleAddAssignee = (member) => {
        if (!member || !member.userId) return;
      
        console.log('üîç Îã¥ÎãπÏûê Ï∂îÍ∞Ä ÏãúÎèÑ:', member);
        
        setNewTask((prev) => {
          const newAssigneeList = [...(Array.isArray(prev.assigneeList) ? prev.assigneeList : []), member];
          console.log('üîç ÏÉàÎ°úÏö¥ Îã¥ÎãπÏûê Î™©Î°ù:', newAssigneeList);
          return {
            ...prev,
            assigneeList: newAssigneeList,
          };
        });
      
        setQuery('');
        setSuggestions([]);
        console.log('üîç Îã¥ÎãπÏûê Ï∂îÍ∞Ä ÏôÑÎ£å, Ï†úÏïà Î™©Î°ù Ï¥àÍ∏∞ÌôîÎê®');
      };
      
    const [query, setQuery] = useState('');
    const [suggestions, setSuggestions] = useState([]);
    
    useEffect(() => {
        const delay = setTimeout(async () => {
          if (query.startsWith('@')) {
            const keyword = query.slice(1).toLowerCase();
            
            // councilIdÍ∞Ä Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏
            if (!councilId || !councilName) {
              console.warn('üîç ÌïôÏÉùÌöå Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§:', { councilName, councilId });
              setSuggestions([]);
              return;
            }
      
            try {
              const response = await fetchAllMembers(councilName, councilId);
              console.log('üîç fetchAllMembers ÏùëÎãµ:', response);
              
              // API ÏùëÎãµ Íµ¨Ï°∞Ïóê Îî∞Îùº ÏïàÏ†ÑÌïòÍ≤å Î∞∞Ïó¥ Ï∂îÏ∂ú
              let members = [];
              if (response && Array.isArray(response)) {
                members = response;
              } else if (response && response.result && Array.isArray(response.result)) {
                members = response.result;
              } else if (response && response.data && Array.isArray(response.data)) {
                members = response.data;
              } else {
                console.warn('üîç ÏòàÏÉÅÍ≥º Îã§Î•∏ API ÏùëÎãµ Íµ¨Ï°∞:', response);
                
                // APIÍ∞Ä ÏûëÎèôÌïòÏßÄ ÏïäÏùÑ Îïå Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
                console.log('üîç Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
                members = [
                  { userId: 1, userName: 'ÍπÄÏ≤†Ïàò', userCouncilRole: 'ÌïôÏÉùÌöåÏû•' },
                  { userId: 2, userName: 'Ïù¥ÏòÅÌù¨', userCouncilRole: 'Î∂ÄÌïôÏÉùÌöåÏû•' },
                  { userId: 3, userName: 'Î∞ïÎØºÏàò', userCouncilRole: 'Ï¥ùÎ¨¥' },
                  { userId: 4, userName: 'Ï†ïÏàòÏßÑ', userCouncilRole: 'ÌöåÍ≥Ñ' },
                  { userId: 5, userName: 'ÏµúÎèôÌòÑ', userCouncilRole: 'Í∏∞Ìöç' }
                ];
              }
              
              console.log('üîç Ï≤òÎ¶¨Îêú Î©§Î≤Ñ Î∞∞Ïó¥:', members);
              
              const filtered = members
                .filter((member) => {
                  const name = (member.userName || '').toLowerCase();
                  const role = (member.userCouncilRole || '').toLowerCase();
                  return name.includes(keyword) || role.includes(keyword);
                })
                .filter((member) => {
                  // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú ÏÇ¨ÎûåÏùÄ Ï†úÏô∏
                  return !newTask.assigneeList.some((a) => a.userId === member.userId);
                });
              
              console.log('üîç ÌïÑÌÑ∞ÎßÅÎêú Ï†úÏïà Î™©Î°ù:', filtered);
              setSuggestions(filtered);
            } catch (err) {
              console.error('Îã¥ÎãπÏûê Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®', err);
              setSuggestions([]);
            }
          } else {
            setSuggestions([]);
          }
        }, 300);
      
        return () => clearTimeout(delay);
      }, [query, newTask.assigneeList, councilName, councilId, currentCouncil]);    
      
      useEffect(() => {
        setNewTaskAll(newTask);
        console.log("üß† ÏµúÏ¢Ö newTask ÏÉÅÌÉú:", newTask);
      }, [newTask, setNewTaskAll]);
             useEffect(() => {
         if (globalTask && globalTask.title && !newTask.title) {
           setNewTask(globalTask);
         }
       }, [globalTask, newTask.title]);
       
       // ÏàòÏ†ï Î™®ÎìúÏùº Îïå Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
       useEffect(() => {
         if (mode === "edit" && globalTask && Object.keys(globalTask).length > 0 && !newTask.title) {
           console.log("üîç ÏàòÏ†ï Î™®Îìú: Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú", globalTask);
           setNewTask(globalTask);
         }
       }, [mode, globalTask, newTask.title]);
      
    
    

       // Ïª§Ïä§ÌÖÄ Ïù∏Ìíã Ïª¥Ìè¨ÎÑåÌä∏
     const CustomDateInput = forwardRef(({ value, onClick }, ref) => (
         <div
         onClick={onClick}
         ref={ref}
         className="px-3 py-2 w-full rounded border border-gray-200 bg-white hover:bg-gray-50 cursor-pointer"
         >
         <span className="text-gray-800 text-sm">
             {value ? new Date(value).toLocaleDateString('ko-KR') : 'ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'}
         </span>
         </div>
     ));
    return(
        <div className="px-8 py-10 mt-[28px] flex flex-col bg-[#FBFBFB] gap-6">
            <div className="space-y-4 mb-6">
                <div className="relative flex items-center w-full">
                    <label className="block w-24 text-sm text-gray-400">Ï†úÎ™©</label>
                    <div className="flex justify-start w-full">
                        <input
                            type="text"
                            placeholder="Ìï† ÏùºÏùò Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
                            value={newTask.title}
                            onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
                            className="px-3 py-2 w-full rounded placeholder-gray-300 focus:outline-none hover:bg-gray-100"
                        />
                    </div>
                </div>

                <div className="relative flex items-center w-full">
                    <label className="block w-24 text-sm text-gray-400">ÎßàÍ∞êÏùº</label>
                    <div className="flex justify-start w-full">
                        <DatePicker
                            selected={newTask.deadline} 
                            onChange={(date) =>setNewTask(prev => ({ ...prev, deadline: date }))}
                            customInput={<CustomDateInput />}
                            dateFormat="yyyy-MM-dd"
                            popperPlacement="bottom-start"
                        />
                    </div>
                </div>

                <div className="relative flex items-center w-full">
                    <label className="block w-24 text-sm text-gray-400">Îã¥ÎãπÏûê</label>
                    <div className="flex justify-start w-full">
                        <div className="relative w-full">
                            <div className="px-3 py-2 w-full rounded border border-gray-200 bg-white">
                                <div className="flex flex-wrap gap-2 mb-2">
                                    {newTask.assigneeList?.map((a) => (
                                        <span
                                            key={a.userId}
                                            className="flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
                                        >
                                            {a.userName}
                                            <button
                                                type="button"
                                                className="ml-1 text-blue-600 hover:text-red-500 text-sm"
                                                onClick={() => handleRemoveAssignee(a.userId)}
                                            >
                                                ‚úï
                                            </button>
                                        </span>
                                    ))}
                                </div>
                                <input
                                    type="text"
                                    placeholder="@Î•º ÏûÖÎ†•ÌïòÍ≥† Îã¥ÎãπÏûê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
                                    value={query}
                                    onChange={(e) => setQuery(e.target.value)}
                                    onKeyDown={(e) => {
                                        if (e.key === ' ' && suggestions.length > 0 && suggestions[0]) {
                                            e.preventDefault();
                                            handleAddAssignee(suggestions[0]);
                                        }
                                    }}
                                    className="w-full text-gray-800 text-sm focus:outline-none placeholder-gray-300"
                                />
                            </div>

                            {suggestions.length > 0 && (
                                <ul className="absolute w-full mt-1 bg-white border border-gray-200 rounded shadow-lg z-10 max-h-[200px] overflow-y-auto">
                                    {suggestions.map((member) => (
                                        <li
                                            key={member.userId}
                                            className="px-3 py-2 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0"
                                            onClick={() => handleAddAssignee(member)}
                                        >
                                            <div className="text-sm text-gray-800">{member.userName}</div>
                                            <div className="text-xs text-gray-500">{member.userCouncilRole}</div>
                                        </li>
                                    ))}
                                </ul>
                            )}
                          
                        </div>
                    </div>
                </div>



                <div className="relative flex items-center w-full">
                    <label className="block w-24 text-sm text-gray-400">Ï≤®Î∂ÄÌååÏùº</label>
                    <div className="flex justify-start w-full">
                        <div className="relative w-full">
                            <input
                                id="file-upload"
                                type="file"
                                className="hidden"
                                onChange={(e) => {
                                    const file = e.target.files?.[0];
                                    if (file) {
                                        setNewTask((prev) => ({ ...prev, file }));
                                    }
                                }}
                            />
                            <label 
                                htmlFor="file-upload" 
                                className="block px-3 py-2 w-full rounded border border-gray-200 bg-white hover:bg-gray-50 cursor-pointer text-gray-800 text-sm"
                            >
                                {newTask.file ? newTask.file.name : 'ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.'}
                            </label>
                        </div>
                    </div>
                </div>

                <div className="relative flex items-start w-full">
                    <label className="block w-24 text-sm text-gray-400 mt-2">ÏÑ§Î™Ö</label>
                    <div className="flex justify-start w-full">
                        <textarea
                            placeholder="Ìï† ÏùºÏùò ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
                            value={newTask.description}
                            onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
                            className="px-3 py-2 w-full h-32 rounded border border-gray-200 bg-white placeholder-gray-300 focus:outline-none hover:bg-gray-50 resize-none"
                        />
                    </div>
                </div>
            </div>
        </div>
    )
}